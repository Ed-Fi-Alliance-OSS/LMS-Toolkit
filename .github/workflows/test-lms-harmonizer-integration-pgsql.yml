# SPDX-License-Identifier: Apache-2.0
# Licensed to the Ed-Fi Alliance under one or more agreements.
# The Ed-Fi Alliance licenses this file to you under the Apache License, Version 2.0.
# See the LICENSE and NOTICES files in the project root for more information.

name: LMS Harmonizer - PostgreSQL Tests
on:
  pull_request:
    paths:
      - 'src/lms-harmonizer/**'
      # Why is there a dependency on the lms-ds-loader? Because the LMS
      # Harmonizer relies on the database tables that are controlled by the LMS
      # DS Loader.
      - 'src/lms-ds-loader/**/postgresql/*.sql'
      # This folder contains copies of the SQL for the core ODS
      - 'utils/**/postgresql/*.sql'
      - 'extension/**/PgSql/Structure/Ods/*.sql'
  push:
    paths:
      - 'src/lms-harmonizer/**'
      - 'src/lms-ds-loader/**/postgresql/*.sql'
      - 'utils/**/postgresql/*.sql'
      - 'extension/**/PgSql/Structure/Ods/*.sql'
    branches:
      - main
  workflow_dispatch:

jobs:
  integration-test-pgsql-lms-harmonizer:
    name: Run PostgreSQL integration tests
    runs-on: ubuntu-20.04
    env:
        PACKAGE_NAME: lms-harmonizer
        SRC_DIR: src/lms-harmonizer
        LOCK_FILE: src/lms-harmonizer/poetry.lock
        PGPASSWORD: postgres

    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_PASSWORD: ${{ env.PGPASSWORD }}
        ports:
          # will assign a random free host port
          - 5432/tcp
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f

      - name: Install Python 3.9
        uses: actions/setup-python@3105fb18c05ddd93efea5f9e0bef7a03a6e9e7df
        with:
          python-version: '3.9.x'

      - name: Install Poetry
        uses: Gr1N/setup-poetry@462ac83c852d49e282a1233c4c24c5411696e7c7

      - name: Get virtual env path
        id: venv-path
        run: |
            poetry env use python
            echo "::set-output name=dir::$(poetry env info -p)"
        working-directory: ${{ env.SRC_DIR }}

      - name: Setup Dependency Caching
        uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353
        id: cache-venv
        with:
          path: ${{ steps.venv-path.outputs.dir }}
          key: ${{ runner.os }}-poetry-${{ hashFiles(env.LOCK_FILE) }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install --yes postgresql-client odbc-postgresql crudini

      - name: Wait for PostgreSQL and install pgcrypto
        run: timeout 30s bash -c 'until psql -h localhost -d postgres -p $PGSQL_PORT -U postgres -c "create extension if not exists pgcrypto"; do sleep 5; done'
        env:
          PGSQL_PORT: ${{ job.services.postgres.ports[5432] }}

      - name: Update ODBC ini file
        run: sudo crudini --set --existing /etc/odbcinst.ini "PostgreSQL ANSI" Driver /usr/lib/x86_64-linux-gnu/odbc/psqlodbca.so

      - name: Directly invoke the LMS Harmonizer PGSQL tests
        run: |
          poetry install
          poetry run pytest tests_integration_pgsql -s -k section_summary_without_error --server=$PGSQL_HOST --username=$PGSQL_USER --port=$PGSQL_PORT --dbname=test_integration_lms_toolkit
        working-directory: src/lms-harmonizer
        env:
          PGSQL_HOST: localhost
          # get randomly assigned published port
          PGSQL_PORT: ${{ job.services.postgres.ports[5432] }}
          PGSQL_USER: postgres

    #   - name: Run CI Integration Task
    #     run: python ./eng/build.py ci:integration-test:pgsql ${{ env.PACKAGE_NAME }}
    #     env:
    #       PGSQL_PASSWORD: ${{ env.PGPASSWORD }}
    #       PGSQL_HOST: localhost
    #       # get randomly assigned published port
    #       PGSQL_PORT: ${{ job.services.postgres.ports[5432] }}
